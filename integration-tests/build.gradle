plugins {
    id 'java'
    id 'idea'
}

ext {
    slf4jVersion = '1.7.25'
    junitJupiterVersion = '5.4.2'
    mockitoVersion = '2.27.0'
    hamcrestVersion = '1.3'
    restAssuredVersion = '5.0.0'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
}

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrestVersion}"
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"

    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4jVersion}"
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: "${slf4jVersion}"

    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.5'

    compileOnly 'jakarta.validation:jakarta.validation-api:3.0.2'
    compileOnly 'jakarta.annotation:jakarta.annotation-api:3.0.0'
    compileOnly 'io.swagger.core.v3:swagger-annotations-jakarta:2.2.9'
    compileOnly 'org.springframework.boot:spring-boot-starter-validation:3.1.0'
}
apply from: "${rootProject.projectDir}/swaggerCodeGen.gradle"
test {
    // By default tests should only run in the subprojects. To manually run tests in your IDEA, uncomment:
    enabled = false
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eu.xenit.docker-alfresco'
    apply plugin: 'eu.xenit.docker-compose.auto'

    def alfrescoVersion = project.name[-2..-1]
    apply from: "${project.projectDir}/overload.gradle"

    description = "Alfresco ${alfrescoVersion} with Alfresco Actuators"

    task integrationTest(type: Test, group: 'verification') {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        testClassesDirs = project.parent.sourceSets.test.output.classesDirs
        classpath = project.parent.sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    check.dependsOn integrationTest

    tasks.withType(Test).configureEach {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }



    dependencies {
        if (project.hasProperty("alfrescoBaseWarBom")) {
            baseAlfrescoWar platform("${alfrescoBaseWarBom}")
            alfrescoAmp platform("${alfrescoBaseWarBom}")
            alfrescoAmp "org.alfresco:alfresco-share-services@amp"
        }
        baseAlfrescoWar "${alfrescoBaseWar}"
        alfrescoAmp project(path: ":alfresco-actuators:${alfrescoActuatorsProjectName}", configuration: "amp")
        alfrescoSM 'org.postgresql:postgresql:42.2.6'
    }

    dockerAlfresco {
        baseImage = "${alfrescoBaseImage}"
        leanImage = false
    }

    dockerCompose {
        useComposeFiles = [
                '../src/test/resources/compose/docker-compose.yml'
        ]
        environment.put 'POSTGRES_IMAGE', "${project.ext.postgresImage}"
        isRequiredBy integrationTest

    }
}